// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BadgeToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BadgeToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BadgeToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BadgeToken", id.toString(), this);
    }
  }

  static load(id: string): BadgeToken | null {
    return changetype<BadgeToken | null>(store.get("BadgeToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address_from(): Bytes {
    let value = this.get("address_from");
    return value!.toBytes();
  }

  set address_from(value: Bytes) {
    this.set("address_from", Value.fromBytes(value));
  }

  get address_to(): Bytes {
    let value = this.get("address_to");
    return value!.toBytes();
  }

  set address_to(value: Bytes) {
    this.set("address_to", Value.fromBytes(value));
  }

  get number_tokens(): i32 {
    let value = this.get("number_tokens");
    return value!.toI32();
  }

  set number_tokens(value: i32) {
    this.set("number_tokens", Value.fromI32(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address_from(): Bytes {
    let value = this.get("address_from");
    return value!.toBytes();
  }

  set address_from(value: Bytes) {
    this.set("address_from", Value.fromBytes(value));
  }

  get address_to(): Bytes {
    let value = this.get("address_to");
    return value!.toBytes();
  }

  set address_to(value: Bytes) {
    this.set("address_to", Value.fromBytes(value));
  }

  get number_tokens(): i32 {
    let value = this.get("number_tokens");
    return value!.toI32();
  }

  set number_tokens(value: i32) {
    this.set("number_tokens", Value.fromI32(value));
  }
}
